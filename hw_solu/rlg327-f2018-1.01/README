My solution uses some features of C that we haven't discussed yet, most notably preprocessor macros and enumerated constants. We'll get to them soon. It uses a version of Dijkstra's algorithm to run twisty corridors, for which it needs a priority queue. heap.[ch] contain the implementation of this. The queue is a Fibonacci queue, which has very nice asymptotic performance, but big constants. For a relatively small graph like the cells in our dungeon (less than 20000 nodes), it's probably a wash whether the Fibonacci heap or a simpler type of heap like a binary heap is the better choice. I haven't run a performance comparison. On very large graphs, the Fibonacci heap will win hands down.

 

The next assignment requires no limit on the maximum number of rooms, so you'll need to modify the room array to be dynamically allocated. You can keep the internal max rooms for dungeon generation purposes, but you should be able to read and write dungeons with any number of rooms. I have posted some test dungeons so that you can test your implementation with compliant input with many rooms.

 

If you are picking up this code drop, please don't be daunted by its length or complexity. You don't have to understand it! You only have to understand the dungeon data structure! Beyond the small issue of dynamically allocating the rooms array, you'll never have to make any changes to the dungeon generation code.