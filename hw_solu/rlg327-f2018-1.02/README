Some stuff that my code does that yours (probably) doesn't:

 

* I add an optional parameter to the --load and --save switches to take a file in the non-default position.

* I accept short forms of all switches, using a single dash and the first letter, so --save == -s.

* In order to generate the "special" test dungeons, I wrote some code to read portable gray map (PGM) images. This is a very simple image format. I could then use an image editing program (Gimp) and my mouse to "draw" the dungeons. The image reading code is far from robust. It will break if you pass it PGMs that aren't exactly like mine. If you'd like to make your own special dungeons, add black (0) and white (255) pixels on top of an otherwise gray 80x21 image.  You could then post your special dungeons in a thread here on Piazza and we can all pathfind them.

* I included code to automatically create $HOME/.rlg327 if it doesn't already exist. I don't check the return values of fwrite(), which, really, I should. Setting bad examples, here! I don't check return values of fread(), either, but in this case there's not a good reason to, because I instead check that the internal size of the file matches the actual size of the file (on disk) using the stat(2) system call. Technically, it's still possible that there would be a read error after making this confirmation; however, the kind of things that would cause these are, for instance, disk failures, in which case you've got much bigger problems!

 

The code (aside from the heap) is still in one file. I think this makes sense organizationally, because it all deals with the dungeon. With the new assignment, pathfinding, I think it starts to make sense to break the code into multiple files. My solution to 1.03 has separate files for the heap, the main program, path finding, dungeon, and utility code (making a directory, for instance).